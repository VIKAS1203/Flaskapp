name: CI/CD Pipeline Terra

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install Flask

      - name: Lint code
        run: |
          pip install flake8
          flake8 app.py

      - name: Run tests
        run: |
          # Add your test commands here
          echo "Tests passed!"

      - name: Build Docker image
        run: docker build -t simple-web-app .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker image
        run: docker tag simple-web-app ${{ secrets.DOCKER_USERNAME }}/simple-web-app:latest
        
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/simple-web-app

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Debug Terraform Output
        working-directory: terraform
        run: terraform output -raw instance_public_ip

      - name: Fetch EC2 Instance IP
        id: terraform_output
        working-directory: terraform
        run: |
           echo "INSTANCE_IP=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')" >> $GITHUB_ENV

      - name: Print Raw Terraform Output
        run: terraform output -raw instance_public_ip

      - name: Print EC2 Instance IP
        run: echo "EC2 Instance IP is ${{ env.INSTANCE_IP }}"


      - name: Create Ansible Inventory
        run: |
          echo "[web]" > ansible/inventory.ini
          echo "ec2-instance ansible_host=$INSTANCE_IP" >> ansible/inventory.ini
          echo "[web:vars]" >> ansible/inventory.ini
          echo "ansible_user=ec2-user" >> ansible/inventory.ini
          echo "ansible_ssh_private_key_file=keypair1.pem" >> ansible/inventory.ini


      - name: Configure Instance with Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          echo "$PRIVATE_KEY" > keypair1.pem
          chmod 600 keypair1.pem
          ansible-playbook -i your_inventory_file -u ${{ secrets.EC2_USER }} --private-key keypair1.pem playbook.yml
      
